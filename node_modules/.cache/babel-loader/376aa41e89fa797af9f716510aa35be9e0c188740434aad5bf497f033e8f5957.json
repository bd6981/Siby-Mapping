{"ast":null,"code":"import { useRef, useState } from 'react';\nimport Supercluster from 'supercluster';\nimport { useDeepCompareEffectNoCheck } from 'use-deep-compare-effect';\nimport { dequal } from 'dequal';\nvar useSupercluster = function useSupercluster(_ref) {\n  var points = _ref.points,\n    bounds = _ref.bounds,\n    zoom = _ref.zoom,\n    options = _ref.options;\n  var superclusterRef = useRef();\n  var pointsRef = useRef();\n  var _useState = useState([]),\n    clusters = _useState[0],\n    setClusters = _useState[1];\n  var zoomInt = Math.round(zoom);\n  useDeepCompareEffectNoCheck(function () {\n    if (!superclusterRef.current || !dequal(pointsRef.current, points) || !dequal(superclusterRef.current.options, options)) {\n      superclusterRef.current = new Supercluster(options);\n      superclusterRef.current.load(points);\n    }\n    if (bounds) {\n      setClusters(superclusterRef.current.getClusters(bounds, zoomInt));\n    }\n    pointsRef.current = points;\n  }, [points, bounds, zoomInt, options]);\n  return {\n    clusters: clusters,\n    supercluster: superclusterRef.current\n  };\n};\nexport default useSupercluster;","map":{"version":3,"mappings":";;;;AAaA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB;MAItBC;IACAC;IACAC;IACAC;EAEA,IAAMC,eAAe,GAAGC,MAAM,EAA9B;EACA,IAAMC,SAAS,GAAGD,MAAM,EAAxB;EACA,gBAAgCE,QAAQ,CAEtC,EAFsC,CAAxC;IAAOC,QAAP;IAAiBC,WAAjB;EAGA,IAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWV,IAAX,CAAhB;EAEAW,2BAA2B,CAAC;IAC1B,IACE,CAACT,eAAe,CAACU,OAAjB,IACA,CAACC,MAAM,CAACT,SAAS,CAACQ,OAAX,EAAoBd,MAApB,CADP,IAEA,CAACe,MAAM,CACJX,eAAe,CAACU,OAAhB,CAEEX,OAHE,EAILA,OAJK,CAHT,EASE;MACAC,eAAe,CAACU,OAAhB,GAA0B,IAAIE,YAAJ,CAAiBb,OAAjB,CAA1B;MACAC,eAAe,CAACU,OAAhB,CAAwBG,IAAxB,CAA6BjB,MAA7B;IACD;IAED,IAAIC,MAAJ,EAAY;MACVQ,WAAW,CAACL,eAAe,CAACU,OAAhB,CAAwBI,WAAxB,CAAoCjB,MAApC,EAA4CS,OAA5C,CAAD,CAAX;IACD;IAEDJ,SAAS,CAACQ,OAAV,GAAoBd,MAApB;EACD,CApB0B,EAoBxB,CAACA,MAAD,EAASC,MAAT,EAAiBS,OAAjB,EAA0BP,OAA1B,CApBwB,CAA3B;EAsBA,OAAO;IAAEK,QAAQ,EAARA,QAAF;IAAYW,YAAY,EAAEf,eAAe,CAACU;EAA1C,CAAP;AACD,CAvCD","names":["useSupercluster","points","bounds","zoom","options","superclusterRef","useRef","pointsRef","useState","clusters","setClusters","zoomInt","Math","round","useDeepCompareEffectNoCheck","current","dequal","Supercluster","load","getClusters","supercluster"],"sources":["/Users/britt/projects/mapping/node_modules/use-supercluster/src/index.tsx"],"sourcesContent":["import { useRef, useState } from \"react\";\nimport Supercluster from \"supercluster\";\nimport { BBox, GeoJsonProperties } from \"geojson\";\nimport { useDeepCompareEffectNoCheck } from \"use-deep-compare-effect\";\nimport { dequal } from \"dequal\";\n\nexport interface UseSuperclusterArgument<P, C> {\n  points: Array<Supercluster.PointFeature<P>>;\n  bounds?: BBox;\n  zoom: number;\n  options?: Supercluster.Options<P, C>;\n}\n\nconst useSupercluster = <\n  P extends GeoJsonProperties = Supercluster.AnyProps,\n  C extends GeoJsonProperties = Supercluster.AnyProps\n>({\n  points,\n  bounds,\n  zoom,\n  options\n}: UseSuperclusterArgument<P, C>) => {\n  const superclusterRef = useRef<Supercluster<P, C>>();\n  const pointsRef = useRef<Array<Supercluster.PointFeature<P>>>();\n  const [clusters, setClusters] = useState<\n    Array<Supercluster.ClusterFeature<C> | Supercluster.PointFeature<P>>\n  >([]);\n  const zoomInt = Math.round(zoom);\n\n  useDeepCompareEffectNoCheck(() => {\n    if (\n      !superclusterRef.current ||\n      !dequal(pointsRef.current, points) ||\n      !dequal(\n        (superclusterRef.current as typeof superclusterRef.current & {\n          options: typeof options;\n        }).options,\n        options\n      )\n    ) {\n      superclusterRef.current = new Supercluster(options);\n      superclusterRef.current.load(points);\n    }\n\n    if (bounds) {\n      setClusters(superclusterRef.current.getClusters(bounds, zoomInt));\n    }\n\n    pointsRef.current = points;\n  }, [points, bounds, zoomInt, options]);\n\n  return { clusters, supercluster: superclusterRef.current };\n};\n\nexport default useSupercluster;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}